pipeline {
  agent {
    kubernetes {
      //cloud 'kubernetes'
      slaveConnectTimeout 900
      yaml '''
        kind: Pod
        spec:
          serviceAccountName: jenkins
          securityContext:
            runAsUser: 1000 # default UID of jenkins user in agent image
          containers:
          - name: trufflehog
            // image: trufflesecurity/trufflehog:3.41.1
            image: core.fert.name:443/hub.docker.com/trufflesecurity/trufflehog:3.41.1
            imagePullPolicy: IfNotPresent
            command:
            - cat
            tty: true
          - name: curl
            // image: curlimages/curl:8.1.2
            image: core.fert.name:443/hub.docker.com/curlimages/curl:8.1.2
            imagePullPolicy: IfNotPresent
            command:
            - cat
            tty: true
            env:
              - name: DEFECTDOJO_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: defectdojo-token
                    key: token
              - name: SONARQUBE_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: sonarqube-token
                    key: token
          - name: dependency-check
            image: core.fert.name:443/hub.docker.com/owasp/dependency-check:8.3.1
            imagePullPolicy: IfNotPresent
            command:
            - cat
            tty: true
            volumeMounts:
              - mountPath: /usr/share/dependency-check/data
                name: jenkins-dependency-check
          - name: kics
            // image: checkmarx/kics:v1.7.2
            image: core.fert.name:443/hub.docker.com/checkmarx/kics:v1.7.2
            imagePullPolicy: IfNotPresent
            command:
            - cat
            tty: true
          - name: kubectl
            image: core.fert.name:443/hub.docker.com/bitnami/kubectl:1.22.16
            imagePullPolicy: IfNotPresent
            command:
            - cat
            tty: true
          - name: owasp-zap
            // image: core.fert.name:443/hub.docker.com/owasp/zap2docker-stable:2.12.0
            image: core.fert.name:443/hub.docker.com/bitnami/kubectl:1.22.16
            imagePullPolicy: IfNotPresent
            command:
            - cat
            tty: true
          - name: maven
            image: core.fert.name:443/hub.docker.com/library/maven:3.9.3
            imagePullPolicy: IfNotPresent
            command:
            - cat
            tty: true
            env:
              - name: SONARQUBE_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: sonarqube-token
                    key: token
            volumeMounts:
              - name: jenkins-maven
                mountPath: /.m2/repository
              - name: sonar-cache
                mountPath: /.sonar
          - name: trivy
            image: core.fert.name:443/hub.docker.com/aquasec/trivy:0.43.1
            imagePullPolicy: IfNotPresent
            command:
            - cat
            tty: true
            volumeMounts:
              - name: trivy-cache
                mountPath: /.cache
          - name: kaniko
            image: gcr.io/kaniko-project/executor:v1.6.0-debug
            imagePullPolicy: IfNotPresent
            securityContext:
              runAsUser: 0
              #fsGroup: 0
            command:
            - sleep
            args:
            - 99d
            volumeMounts:
              - name: jenkins-docker-cfg
                mountPath: /kaniko/.docker
          volumes:
          - name: jenkins-docker-cfg
            projected:
              sources:
              - secret:
                  name: docker-credentials
                  items:
                    - key: .dockerconfigjson
                      path: config.json
          - name: jenkins-dependency-check
            persistentVolumeClaim:
              claimName: jenkins-dependency-check
          - name: jenkins-maven
            persistentVolumeClaim:
              claimName: jenkins-maven
          - name: sonar-cache
            emptyDir: {}
          - name: trivy-cache
            emptyDir: {}
              
'''
    }
  }
  stages {
    stage('GIT'){
      steps {
        checkout scmGit(
          branches: [[name: 'master']],
          userRemoteConfigs: [[url: 'https://github.com/fert-f/hospital.git']])
        // git 'https://github.com/fert-f/hospital'
      }
    }
    stage('Maven build') {
      steps {
          container('maven') {
            sh "mvn --batch-mode --errors --show-version --no-transfer-progress dependency:resolve # resolves and downloads the project dependencies."
            sh "mvn --batch-mode --errors --show-version --no-transfer-progress clean package"
            sh "ls; ls -la target"
          }
      }
    }
    stage('Analyze') {
      parallel {
        stage('Dockerfile') {
          steps {
            container('kics') {
              sh "kics scan --path ./Dockerfile --report-formats json --no-progress --ignore-on-exit all --output-path . --output-name kics-dockerfile.scan.json"
            }
            archiveArtifacts(artifacts: 'kics-dockerfile.scan.json', followSymlinks: false)
            container('curl') {
              sh '''#!/usr/bin/env sh
                set -x
                echo 'Pushing scan result to DefectDojo'
                host=defectdojo.fert.name
                svc=defectdojo-django.security.svc.cluster.local
                echo ${DEFECTDOJO_TOKEN} | base64
                # Push report to defectdojo
                curl -sk "http://${svc}/api/v2/reimport-scan/" -H "Host: ${host}" \
                          --header "Authorization: Token ${DEFECTDOJO_TOKEN}" \
                          --form 'test_title=Dockerfile' \
                          --form 'product_type_name=Research and Development' \
                          --form 'product_name=Application' \
                          --form 'engagement_name=Kics' \
                          --form 'auto_create_context=true' \
                          --form 'do_not_reactivate=false' \
                          --form 'minimum_severity=Info' \
                          --form 'close_old_findings=false' \
                          --form 'active=true' \
                          --form 'tags=docker' \
                          --form 'environment=Development' \
                          --form 'verified=false' \
                          --form 'engagement_end_date=2030-12-31' \
                          --form 'endpoint_to_add=1' \
                          --form 'deduplication_on_engagement=true' \
                          --form 'scan_type=KICS Scan' \
                          --form 'file=@kics-dockerfile.scan.json'
              '''
            }
          }
        }
        stage('Manifests') {
          steps {
            container('kubectl') {
              sh '''#!/usr/bin/env sh
                echo "MOCK MANIFEST CREATION. TODO: replace with real once"
                GIT_SHA=$(cat .git/$(cat .git/HEAD | awk '{print $2}')| cut -c 1-7|| echo "dev")
                echo "Deploying kubernetes resources ${GIT_SHA}"
                kubectl create deploy --dry-run=client -o yaml application --image=core.fert.name/library/hospital:${GIT_SHA} -o yaml > deployment.yaml
              '''
            }
            container('kics') {
              sh "kics scan --path ./deployment.yaml --report-formats json --no-progress --ignore-on-exit all --output-path . --output-name kics-manifests.scan.json"
            }
            archiveArtifacts(artifacts: 'kics-manifests.scan.json', followSymlinks: false)
            container('curl') {
              sh '''#!/usr/bin/env sh
                set -x
                echo 'Pushing scan result to DefectDojo'
                host=defectdojo.fert.name
                svc=defectdojo-django.security.svc.cluster.local
                echo ${DEFECTDOJO_TOKEN} | base64
                # Push report to defectdojo
                curl -sk "http://${svc}/api/v2/reimport-scan/" -H "Host: ${host}" \
                          --header "Authorization: Token ${DEFECTDOJO_TOKEN}" \
                          --form 'test_title=Manifest' \
                          --form 'product_type_name=Research and Development' \
                          --form 'product_name=Application' \
                          --form 'engagement_name=Kics' \
                          --form 'auto_create_context=true' \
                          --form 'do_not_reactivate=false' \
                          --form 'minimum_severity=Info' \
                          --form 'close_old_findings=false' \
                          --form 'active=true' \
                          --form 'tags=kubernetes' \
                          --form 'environment=Development' \
                          --form 'verified=false' \
                          --form 'engagement_end_date=2030-12-31' \
                          --form 'endpoint_to_add=1' \
                          --form 'deduplication_on_engagement=true' \
                          --form 'scan_type=KICS Scan' \
                          --form 'file=@kics-manifests.scan.json'
              '''
            }
          }
        }
        stage('Dependencies') {
          steps {
            container('dependency-check') {
              // TODO: Updating dependency-check has some issues, need to fix
              sh '''#!/usr/bin/env sh
                       /usr/share/dependency-check/bin/dependency-check.sh  --scan .  --project Application --format HTML -o dependencies.scan.html # --noupdate
                       /usr/share/dependency-check/bin/dependency-check.sh  --scan .  --project Application --format  XML -o dependencies.scan.xml --noupdate
              '''
            }
            archiveArtifacts(artifacts: 'dependencies.scan.xml, dependencies.scan.html', followSymlinks: false)
            container('curl') {
              sh '''#!/usr/bin/env sh
                  set -x
                  echo 'Pushing scan result to DefectDojo'
                  host=defectdojo.fert.name
                  svc=defectdojo-django.security.svc.cluster.local
                  echo ${DEFECTDOJO_TOKEN} | base64
                  # Push report to defectdojo
                  curl -sk "http://${svc}/api/v2/reimport-scan/" -H "Host: ${host}" \
                            --header "Authorization: Token ${DEFECTDOJO_TOKEN}" \
                            --form 'test_title=SCA' \
                            --form 'product_type_name=Research and Development' \
                            --form 'product_name=Application' \
                            --form 'engagement_name=DependencyCheck' \
                            --form 'auto_create_context=true' \
                            --form 'do_not_reactivate=false' \
                            --form 'minimum_severity=Info' \
                            --form 'close_old_findings=false' \
                            --form 'active=true' \
                            --form 'tags=sca' \
                            --form 'environment=Development' \
                            --form 'verified=false' \
                            --form 'engagement_end_date=2030-12-31' \
                            --form 'endpoint_to_add=1' \
                            --form 'deduplication_on_engagement=true' \
                            --form 'scan_type=Dependency Check Scan' \
                            --form 'file=@dependencies.scan.xml'
                '''
            }
          }
        }
        stage('Secrets') {
          steps {
            container('trufflehog') {
              sh "trufflehog filesystem . --no-update --json > trufflehog.scan.json"
            }
            archiveArtifacts(artifacts: 'trufflehog.scan.json', followSymlinks: false)
            container('curl') {
              sh '''#!/usr/bin/env sh
                set -x
                echo 'Pushing scan result to DefectDojo'
                host=defectdojo.fert.name
                svc=defectdojo-django.security.svc.cluster.local
                echo ${DEFECTDOJO_TOKEN} | base64
                # Push report to defectdojo
                curl -sk "http://${svc}/api/v2/reimport-scan/" -H "Host: ${host}" \
                          --header "Authorization: Token ${DEFECTDOJO_TOKEN}" \
                          --form "test_title=FilesystemSecrets" \
                          --form 'product_type_name="Research and Development"' \
                          --form 'product_name=Application' \
                          --form "engagement_name=Trufflehog" \
                          --form 'auto_create_context=true' \
                          --form 'do_not_reactivate=false' \
                          --form 'minimum_severity=Info' \
                          --form 'close_old_findings=false' \
                          --form 'active=true' \
                          --form 'tags=secrets' \
                          --form 'environment=Development' \
                          --form 'verified=false' \
                          --form 'engagement_end_date=2030-12-31' \
                          --form 'endpoint_to_add=1' \
                          --form 'deduplication_on_engagement=true' \
                          --form 'scan_type=Trufflehog Scan' \
                          --form 'file=@trufflehog.scan.json'
              '''
            }
          }
        }
      }
    }
    stage('Maven test') {
      steps {
          container('maven') {
            sh "mvn --batch-mode --errors --show-version --no-transfer-progress test; pwd; ls -la target"
          }
      }
    }
    stage('Sonar scan') {
      steps {
          container('maven') {
            
            sh '''#!/usr/bin/env sh
                 set +x
                 SONAR_HOST_URL=http://sonarqube-sonarqube.security.svc.cluster.local:9000
                 mvn --batch-mode --errors --show-version --no-transfer-progress sonar:sonar -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.login=${SONARQUBE_TOKEN}  -Dsonar.projectKey=Application || echo "Exit status: $?"
                 cat target/sonar/report-task.txt
               '''
          }
          container('curl') {
            sh '''#!/usr/bin/env sh
                set -x
                host=defectdojo.fert.name
                svc=defectdojo-django.security.svc.cluster.local
                sonar_url=http://sonarqube-sonarqube.security.svc.cluster.local:9000/api

                # Sonar Auth
                admin_token=$(curl -sk "http://${svc}/api/v2/api-token-auth/" -H "Host: ${host}" -X POST -H 'accept: application/json' -H 'Content-Type: application/json' --data '{"username": "admin", "password": "admin"}' | grep -o '"token":"[^"]*' | cut -d'"' -f4 )

                # Check if tools are set up
                if ! (curl -sk "http://${svc}/api/v2/tool_configurations/" -H "Host: ${host}" -X GET -H 'accept: application/json' -H 'Content-Type: application/json' -H "Authorization: Token ${admin_token}" | grep -q sonarqube-sonarqube)
                then
                  # Create tools config
                  echo "## Creating tools config";
                  tool_id=$(curl -sk "http://${svc}/api/v2/tool_configurations/" -H "Host: ${host}" -X POST -H 'accept: application/json' -H 'Content-Type: application/json' -H "Authorization: Token ${admin_token}" --data '{
                    "name": "Sonarqube", "description": "Sonarqube integration","url": "'"${sonar_url}"'", "authentication_type": "API","extras": "BUG,VULNERABILITY,CODE_SMELL", "username": null, "auth_title": null, "tool_type": 6,"api_key": "'"${SONARQUBE_TOKEN}"'"
                  }' | grep -o '"id":[^,]*' |  cut -d':' -f2)
                  # Create product API scan configuration
                  echo "## Creating product API scan configuration";
                  curl -sk "http://${svc}/api/v2/product_api_scan_configurations/" -H "Host: ${host}" -X POST -H 'accept: application/json' -H 'Content-Type: application/json' -H "Authorization: Token ${admin_token}" --data '{
                        "service_key_1": "Application", "service_key_2": null, "service_key_3": null, "product": 1,"tool_configuration": '"${tool_id}"'}'
                else echo "Sonarqube tools are configured"; fi

                # Push report to defectdojo
                curl -sk "http://${svc}/api/v2/reimport-scan/" -H "Host: ${host}" \
                          --header "Authorization: Token ${DEFECTDOJO_TOKEN}" \
                          --form 'test_title=Sonarqube' \
                          --form 'product_type_name=Research and Development' \
                          --form 'product_name=Application' \
                          --form 'engagement_name=SAST' \
                          --form 'auto_create_context=true' \
                          --form 'do_not_reactivate=false' \
                          --form 'minimum_severity=Info' \
                          --form 'close_old_findings=false' \
                          --form 'active=true' \
                          --form 'tags=docker' \
                          --form 'environment=Development' \
                          --form 'verified=false' \
                          --form 'engagement_end_date=2030-12-31' \
                          --form 'endpoint_to_add=1' \
                          --form 'deduplication_on_engagement=true' \
                          --form 'scan_type=SonarQube API Import' \
                          --form 'api_scan_configuration=1'
               '''
          }
      }
    }
    stage('Docker push') {
      steps {
          container('kaniko') {
            sh '''#!/busybox/sh
              # echo "FROM jenkins/inbound-agent:latest" > Dockerfile
              echo "10.0.20.20 core.fert.name" >> /etc/hosts
              GIT_SHA=$(cat .git/$(cat .git/HEAD | awk '{print $2}')| cut -c 1-7|| echo "dev")
              echo "Adding tag $GIT_SHA"
              echo /kaniko/executor --force --context `pwd` --insecure --skip-tls-verify --destination=core.fert.name/library/hospital:latest --destination=core.fert.name/library/hospital:${GIT_SHA}
              /kaniko/executor --force --context `pwd` --insecure --skip-tls-verify --destination=core.fert.name/library/hospital:latest --destination=core.fert.name/library/hospital:${GIT_SHA}
              touch COMPLETED
            '''
          }
      }
    }
    stage('Kubernetes deploy') {
      steps {
          container('kubectl') {
            sh '''#!/usr/bin/env bash
              set -x
              export GIT_SHA=$(cat .git/$(cat .git/HEAD | awk '{print $2}')| cut -c 1-7|| echo "dev")
              export namespace=default
              echo "Deploying kubernetes resources ${GIT_SHA}"
              kubectl create configmap db-init -n ${namespace} --from-file=./src/main/resources/brizer.sql --dry-run=client -o yaml | kubectl apply -f -
              # Update image tag in file
              sed "s/IMAGE_TAG/${GIT_SHA}/" deploy/hospital.yaml
              sed "s/IMAGE_TAG/${GIT_SHA}/" deploy/hospital.yaml | kubectl apply -n ${namespace} -f -
            '''
          }
      }
    }
    stage('Docker image scan') {
      steps {
        container('trivy') {
          sh 'trivy --help' 
          sh 'trivy image --help' 
          sh '''#!/usr/bin/env sh
            trivy_url=http://trivy.security.svc.cluster.local:9090
            GIT_SHA=$(cat .git/$(cat .git/HEAD | awk '{print $2}')| cut -c 1-7|| echo "dev")
            trivy image --insecure  --server ${trivy_url} core.fert.name/library/hospital:${GIT_SHA} || sleep 1000
            trivy image --insecure  --server ${trivy_url} core.fert.name/library/hospital:${GIT_SHA} --format json > trivy.scan.json
          '''
        }
        container('curl') {
          sh '''#!/usr/bin/env sh
            host=defectdojo.fert.name
            svc=defectdojo-django.security.svc.cluster.local
            echo 'Pushing scan result to DefectDojo'
            curl -sk "http://${svc}/api/v2/reimport-scan/" -H "Host: ${host}" \
              --header "Authorization: Token ${DEFECTDOJO_TOKEN}" \
              --form 'test_title=Trivy' \
              --form 'product_type_name=Research and Development' \
              --form 'product_name=Application' \
              --form 'engagement_name=SAST' \
              --form 'auto_create_context=true' \
              --form 'do_not_reactivate=false' \
              --form 'minimum_severity=Info' \
              --form 'close_old_findings=false' \
              --form 'active=true' \
              --form 'tags=docker' \
              --form 'environment=Development' \
              --form 'verified=false' \
              --form 'engagement_end_date=2030-12-31' \
              --form 'endpoint_to_add=1' \
              --form 'deduplication_on_engagement=true' \
              --form 'scan_type=Trivy Scan' \
              --form 'file=@trivy.scan.json'
          '''
        }
      }
    }
    stage('Runtime analyzis') {
      parallel {
        stage('DAST') {
          steps {
            container('owasp-zap') {
              sh "echo 'Scanning DAST'; touch zap.scan.json"
            }
            container('curl') {
              sh '''#!/usr/bin/env sh
                host=defectdojo.fert.name
                svc=defectdojo-django.security.svc.cluster.local
                echo 'Pushing scan result to DefectDojo'
                curl -sk "http://${svc}/api/v2/reimport-scan/" -H "Host: ${host}" \
                  --header "Authorization: Token ${DEFECTDOJO_TOKEN}" \
                  --form 'test_title=ZAP' \
                  --form 'product_type_name=Research and Development' \
                  --form 'product_name=Application' \
                  --form 'engagement_name=DAST' \
                  --form 'auto_create_context=true' \
                  --form 'do_not_reactivate=false' \
                  --form 'minimum_severity=Info' \
                  --form 'close_old_findings=false' \
                  --form 'active=true' \
                  --form 'tags=runtime' \
                  --form 'environment=Development' \
                  --form 'verified=false' \
                  --form 'engagement_end_date=2030-12-31' \
                  --form 'endpoint_to_add=1' \
                  --form 'deduplication_on_engagement=true' \
                  --form 'scan_type=ZAP Scan' \
                  --form 'file=@zap.scan.json'
              '''
            }
          }
        }
      }
    }
  }
}